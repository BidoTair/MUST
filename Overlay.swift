//
//  Overlay.swift
//
//  Created on 6/23/17.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class Overlay: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Page 1
    
    class func drawPage1() {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Combined Shape
        let combinedShape = UIBezierPath()
        combinedShape.move(to: CGPoint(x: 57.71, y: 107.29))
        combinedShape.addCurve(to: CGPoint(x: 61, y: 108), controlPoint1: CGPoint(x: 58.71, y: 107.75), controlPoint2: CGPoint(x: 59.83, y: 108))
        combinedShape.addLine(to: CGPoint(x: 280, y: 108))
        combinedShape.addCurve(to: CGPoint(x: 288, y: 100), controlPoint1: CGPoint(x: 284.42, y: 108), controlPoint2: CGPoint(x: 288, y: 104.42))
        combinedShape.addLine(to: CGPoint(x: 288, y: 11))
        combinedShape.addCurve(to: CGPoint(x: 280, y: 3), controlPoint1: CGPoint(x: 288, y: 6.58), controlPoint2: CGPoint(x: 284.42, y: 3))
        combinedShape.addLine(to: CGPoint(x: 61, y: 3))
        combinedShape.addCurve(to: CGPoint(x: 58.42, y: 3.42), controlPoint1: CGPoint(x: 60.1, y: 3), controlPoint2: CGPoint(x: 59.23, y: 3.15))
        combinedShape.addLine(to: CGPoint(x: 55, y: 0))
        combinedShape.addLine(to: CGPoint(x: 0, y: 55))
        combinedShape.addLine(to: CGPoint(x: 55, y: 110))
        combinedShape.addLine(to: CGPoint(x: 57.71, y: 107.29))
        combinedShape.close()
        combinedShape.move(to: CGPoint(x: 57.71, y: 107.29))
        context.saveGState()
        context.translateBy(x: 192, y: 90)
        combinedShape.usesEvenOddFillRule = true
        context.saveGState()
        context.beginPath()
        context.addPath(combinedShape.cgPath)
        context.addRect(combinedShape.bounds.insetBy(dx: -4, dy: -6))
        context.clip(using: .evenOdd)
        context.translateBy(x: -293, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 293, y: 2)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 4 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.5).cgColor)
        }
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        do {
            UIColor.black.setFill()
            combinedShape.fill()
            context.saveGState()
            combinedShape.lineWidth = 2
            context.beginPath()
            context.addPath(combinedShape.cgPath)
            context.clip(using: .evenOdd)
            UIColor.black.setStroke()
            combinedShape.stroke()
            context.restoreGState()
        }
        context.endTransparencyLayer()
        context.restoreGState()
        combinedShape.usesEvenOddFillRule = true
        UIColor(hue: 1, saturation: 0, brightness: 0.359, alpha: 0.81).setFill()
        combinedShape.fill()
        context.saveGState()
        combinedShape.lineWidth = 2
        context.beginPath()
        context.addPath(combinedShape.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.592, alpha: 1).setStroke()
        combinedShape.stroke()
        context.restoreGState()
        context.restoreGState()
    }
    
    
}
